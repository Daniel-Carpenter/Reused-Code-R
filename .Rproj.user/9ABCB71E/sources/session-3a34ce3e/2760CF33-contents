# Read Commonly Used Library and Reusable Functions
source('Reused-Code//Read-Data-and-Library.R')
library(zoo)
library(ggtext)
library(lmtest)


# inputs -----------------------------------------------------------------------

# FY 24 start through Jan 24
startDate = as.Date('1900-01-01')
endDate   = as.Date('2024-02-01')

covidShutdownStart = as.Date('2020-03-01') 
covidShutdownEnd   = as.Date('2020-06-02') 


periodGrouping = 'week' # 'month'


highlightedDate   = floor_date(endDate - days(1), 'month')

periodGroupingLabel = ifelse(periodGrouping == 'week', 'Weekly', 'Monthly')
pointsAlphaLevel    = ifelse(periodGrouping == 'week', 0.125, 0.125)
pointsSizeLevel     = ifelse(periodGrouping == 'week', 2.5,  3)

# DATA =========================================================================

## DATABASE CONNECTION =========================================================

df_base <- tbl(database,                            # The database
               in_schema(schema = 'BUDGET',           # The schema
                         table  = 'DailyRevenueTracker')) |>  # The table

  # Date filters
  filter(FORECAST_DATE >= startDate & FORECAST_DATE < endDate) |>
       
  # not covid shutdown
  filter(!(FORECAST_DATE >= covidShutdownStart & FORECAST_DATE < covidShutdownEnd)) |>
  
  # Gaming metrics
  select(FORECAST_DATE, COIN_IN_ACTUAL, FREEPLAY_ACTUAL, GROSS_WIN_ACTUAL) |> 
  collect() |>
  
  # Group by month
  group_by(PERIOD = ceiling_date(FORECAST_DATE, periodGrouping) - days(1)) |> 
  summarise(
    freeplay = sum(FREEPLAY_ACTUAL,  na.rm = T),
    coinIn   = sum(COIN_IN_ACTUAL,   na.rm = T),
    grossWin = sum(GROSS_WIN_ACTUAL, na.rm = T),
    netWin   = sum(GROSS_WIN_ACTUAL - FREEPLAY_ACTUAL, na.rm = T),
  ) |> 
  
  # in case there are partial weeks in one month vs. other
  # only a safegaurd on weekly aggregation
  filter(PERIOD < endDate)


df <- df_base
df[['freeplay_TTM']] <- zoo::rollapply(df_base$freeplay, 12, sum, na.rm = TRUE, fill = NA, align = 'right')
df[['grossWin_TTM']] <- zoo::rollapply(df_base$grossWin, 12, sum, na.rm = TRUE, fill = NA, align = 'right')
df[['coinIn_TTM']]   <- zoo::rollapply(df_base$coinIn, 12, sum, na.rm = TRUE, fill = NA, align = 'right')


df <- df |> 
  mutate(freeplayPerGrossWin_TTM = freeplay_TTM / grossWin_TTM,
         coinInPerFreeplay = coinIn_TTM / freeplay_TTM,
         netWinPerFreeplayNominal = netWin / freeplay,
         ) |> 
  drop_na()  



# LOLLIPOP =--------------------------------------------------------------------

millionsOfDollars <- function(x) dollar(x / 1e6, prefix = "$", suffix = " M")
eomonthFormat = '%B %Y'


createGraph <- function(column, filename, 
                        axisLabelFun = millionsOfDollars, 
                        lollipopColor = 'blue',
                        yAxisNudgeFactor = 0.3,
                        includeLabel = TRUE,
                        includeRangeLabel = FALSE,
                        fixedNudgeLeader = NULL
                        ) {

  # Calculate the minimum value of the specified column and reduce it by 10%
  minValueOfColumn <- min(df |> select({{column}}), na.rm = TRUE)
  yAxisMinValue <- minValueOfColumn  * 0.9
  yLabelNudgeAmt <- minValueOfColumn * yAxisNudgeFactor
  
  # Calculate the max value of the specified column and reduce it by 10%
  maxValueOfColumn <- max(df |> select({{column}}), na.rm = TRUE)
  yAxisMaxValue <- maxValueOfColumn  * 1.15
  
  
  # Min max labels
  if (includeRangeLabel) {
    labelRange <- df |> 
      filter({{column}} == minValueOfColumn |
               {{column}} == maxValueOfColumn)
    
    dataLabelRange <- list(
      
      # leader line
      geom_segment(data = labelRange,
                   aes(x    = PERIOD,
                       xend = PERIOD,
                       y    = ({{column}} + yLabelNudgeAmt) * 0.99,
                       yend = {{column}} + ifelse(is.null(fixedNudgeLeader), {{column}} * 1.015, fixedNudgeLeader)
                   ),
                   color = scale_cmac('gray', 'gray5'),
                   alpha = 0.5,
                   linewidth  = 0.75,
                   arrow = arrow(type = 'closed', length = unit(3, 'pt'))
      ),
      
      # Add data label
      geom_text(data = labelRange,
        aes(label = paste0(dollar(round({{column}}, 0)), '\n', format(PERIOD, '%b-%y')),
                    x = PERIOD),
        vjust = 0,
        nudge_y = yLabelNudgeAmt,
        size = 4,
        family = 'Times',
        color = scale_cmac('color', lollipopColor)
        # fontface = 'bold'
      )
    )
  } else{
    dataLabelRange <- list()
  }
  
  # Last period label
  if (includeLabel) {
    
      
    dataLabel <- list(
          
          # leader line
          geom_segment(data = df |> filter(PERIOD == last(df$PERIOD)),
            aes(x    = PERIOD,
                xend = PERIOD,
                y    = ({{column}} + yLabelNudgeAmt) * 0.99,
                yend = {{column}} * 1.015
            ),
            color = scale_cmac('gray', 'gray5'),
            alpha = 0.5,
            linewidth  = 0.75,
            arrow = arrow(type = 'closed', length = unit(3, 'pt'))
          ),
          
          # Add data label
          geom_text(data = df |> filter(PERIOD == last(df$PERIOD)),
            aes(label = paste0(format(PERIOD, '%b-%y'), '\nDecrease'),
                        x = PERIOD),
            vjust = 0,
            nudge_y = yLabelNudgeAmt,
            size = 4,
            family = 'Times',
            color = scale_cmac('blue', 'blue2'),
            fontface = 'bold'
          )
          )
  } else {
    dataLabel = list()
  }
  
  
  plot_out <- df |>
    ggplot(aes(x = PERIOD,
               y = {{column}}
               )) +

    # Labels
    labs(title    = paste(filename, ifelse(includeLabel, paste('Decreases in', format(max(df$PERIOD), eomonthFormat)), ''), '\n'),
         subtitle = 'Aggregate Trailing Twelve Month (TTM) Totals by Line\n',
         x        = '\nMonth-End Date',
         y        = paste(filename, '\n'),
         caption = paste0('\n*Excludes Covid-19 shutdown dates from ',
                          format(covidShutdownStart, eomonthFormat), ' up to ', format(covidShutdownEnd, eomonthFormat), '.'
         )) +

    # Build a lollipop chart
    geom_segment(aes(x    = PERIOD,
                     xend = PERIOD,
                     y    = yAxisMinValue,
                     yend = {{column}}
    ),
    color = scale_cmac('color', lollipopColor),
    alpha = 0.5,
    linewidth  = 0.75) +

    geom_point(alpha = 0.9,
               size  = 2,
               color = scale_cmac('color', lollipopColor)
               ) +

    dataLabel + # last period label
    dataLabelRange +  # min max label

    scale_y_continuous(labels = axisLabelFun, limits = c(yAxisMinValue, yAxisMaxValue)) +
    scale_fill_cmac() +
    scale_color_cmac() +
    theme_cmac(inTimesNewRoman = T) +
    theme(legend.position = 'none')


  print(plot_out)

  exportToPNG(cowplot::plot_grid(last_plot()),
              outputFileName = paste0('Marketing/Visualizations/', filename),
              outHeight = 1100,
              outWidth = 1600,
              outResolution = 140,
              SCALED_BY = 4
  )
}

# Only update these graphs if monthly (weekly set for later graphs)
if (periodGrouping == 'month') {
  
  # Free Play
  createGraph(freeplay_TTM, 'Free Play Trend',
              lollipopColor = 'blue'
  )

  # Free Play % of Gross Win
  createGraph(freeplayPerGrossWin_TTM, 'Free Play as Percentage of Gross Win Trend',
              axisLabelFun = percent,
              lollipopColor = 'purple',
              yAxisNudgeFactor = 0.15)
  
  # Coin In per $1 of Free Play
  createGraph(coinInPerFreeplay, 'Coin In per $1 of Free Play Trend',
              lollipopColor = 'gray',
              axisLabelFun = dollar,
              includeLabel = FALSE,
              includeRangeLabel = TRUE,
              yAxisNudgeFactor = 0.125,
              fixedNudgeLeader = 4.5
              )
}



# SCATTER 1 ----------------------------------------------------------------------

# Start of TTM period
ttmDate <- ceiling_date(max(df$PERIOD - days(365)), 'month')
priorTTMDate <- ceiling_date(max(df$PERIOD - days(365*2)), 'month')

df_plot <- df |> 
  mutate(yearNum = as.factor(year(PERIOD)),
         isTTM   = if_else(PERIOD >= ttmDate, 'TTM', 'Prior Periods'),
         isHighlightedDate   = if_else(PERIOD >= highlightedDate, format(highlightedDate, eomonthFormat), 'Prior Periods')
         )

df_plot$isHighlightedDate = factor(df_plot$isHighlightedDate, levels = unique(df_plot$isHighlightedDate))


# df_plot$freeplay = scale(df_plot$freeplay, center = min(df_plot$freeplay), scale = max(df_plot$freeplay) - min(df_plot$freeplay))
# df_plot$netWin = scale(df_plot$netWin, center = min(df_plot$netWin), scale = max(df_plot$netWin) - min(df_plot$netWin))

# confidence interval
ci = 0.95

df_plot |> 
  ggplot(aes(x = freeplay,
             y = netWin,
             fill  = isTTM,
             color = isTTM 
             )) + 
  geom_smooth(method = 'lm',
              level = ci) + 
  
  geom_point(
    # aes(pch = isHighlightedDate),
    size = pointsSizeLevel, 
    alpha = pointsAlphaLevel
    ) +
  scale_x_continuous(labels = millionsOfDollars) + 
  scale_y_continuous(labels = millionsOfDollars) +
  # scale_shape_manual(values = c(16, 24)) + 
  scale_fill_cmac() +
  scale_color_cmac() +
  theme_cmac(inTimesNewRoman = T) +
  theme(legend.box = 'vertical',
        plot.subtitle = element_markdown()
        ) + 
  labs(title    = 'Increasing Free Play while Incremental Net Win Diminishes\n',
       subtitle = paste('Trailing Twelve Months (TTM) vs. Pre-TTM Comparison | Aggregated<b>', 
                        periodGroupingLabel, '</b><br>'),
       x        = '\nFree Play',
       y        = 'Net Win\n',
       caption = paste0('\n*Excludes Covid-19 shutdown dates from ',
                       format(covidShutdownStart, eomonthFormat), ' up to ', format(covidShutdownEnd, eomonthFormat), '.',
                       '\n**"TTM" periods defined as: ', 
                       format(ttmDate, eomonthFormat), ' through ', format(max(df_plot$PERIOD), eomonthFormat), '.',
                       '\n***Highly correlated data help identify higher-level changes, but do not infer causal relationships.',
                       "\n****Shaded regions display the linear trends'",
                       ci*100, "% confidence intervals."
       )
       )

exportToPNG(cowplot::plot_grid(last_plot()), 
            outputFileName = paste0('Marketing/Visualizations/Scatter-TTM-', periodGroupingLabel),
            outHeight = 1200,
            outWidth = 1300,
            outResolution = 140,
            SCALED_BY = 5
)


# HYPOTHESIS TEST --------------------------------------------------------------


if (periodGrouping == 'week') {
    
  
  df_plotTest <- df_plot |>
    filter(PERIOD >= priorTTMDate) |> 
    mutate(comparisonPeriod = if_else(PERIOD >= ttmDate, 'TTM', 'Prior TTM'),
  )
  
  # Calculate medians for each comparisonPeriod
  medianOfPeriods <- df_plotTest |> 
    group_by(comparisonPeriod) |> 
    summarise(medianValue = median(netWinPerFreeplayNominal, na.rm = TRUE),
              variance = var(netWinPerFreeplayNominal, na.rm = TRUE),
              obs = n())
  
  obsPerGroup = mean(medianOfPeriods$obs)

  
  ## NET WIN PER FREEPLAY DENSITY ----------------------------------------------
  # Density charts displaying difference in TTM vs. Prior TTM
  
  df_plotTest |> 
    ggplot(aes(
      x = netWinPerFreeplayNominal,
      color = comparisonPeriod,
      fill  = comparisonPeriod
      )) + 
    
    # DEnsity plots
    geom_density(alpha = 0.2) +
    
    # Median values
    geom_vline(data = medianOfPeriods, 
               aes(xintercept = medianValue, 
                   color = comparisonPeriod), 
               linetype = "dashed",
               linewidth = 1.25,
               alpha = 1
               ) +
    
    geom_text(data = medianOfPeriods, 
              aes(x = medianValue, 
                  y = c(0.15, 0.55), 
                  label = paste0(comparisonPeriod, '\nMedian\n', dollar(round(medianValue, 1)))), 
              hjust = c(0, 1),
              nudge_x = 0.1 * c(1, -1),
              size = 4.5,
              fontface = 'bold',
              family = 'Times'
    ) +  
    
    scale_x_continuous(labels = dollar) +
    scale_fill_cmac() +
    scale_color_cmac() +
    theme_cmac(inTimesNewRoman = T,
               plot.subtitle = element_markdown()
               ) + 
    
    labs(title    = 'Decreasing Net Win per $1 of Free Play\n',
         subtitle = paste('Trailing Twelve Months (TTM) vs. Prior TTM Comparison | Aggregated<b>', 
                          periodGroupingLabel, '</b><br>'),
         x        = '\nNet Win per $1 of Free Play',
         y        = 'Density\n',
         caption = paste0('\n*Excludes Covid-19 shutdown dates from ',
                          format(covidShutdownStart, eomonthFormat), ' up to ', format(covidShutdownEnd, eomonthFormat), '.',
                          '\n**"TTM" periods defined as: ', 
                          format(ttmDate, eomonthFormat), ' through ', format(max(df_plot$PERIOD), eomonthFormat), '.',
                          '\n***"Prior TTM" periods defined as: ', 
                          format(priorTTMDate, eomonthFormat), ' through ', format(ttmDate - days(1), eomonthFormat), '.',
                          '\n****Observations per group: ', obsPerGroup, ' (weeks per year).' 
         )
    )
  
  
  exportToPNG(cowplot::plot_grid(last_plot()), 
              outputFileName = paste0('Marketing/Visualizations/Net Win per $1 of Free Play Distributions'),
              outHeight = 1250,
              outWidth = 1200,
              outResolution = 140,
              SCALED_BY = 5
  )
  
  
  
  
  ## T-TEST - NET WIN PER FREEPLAY  --------------------------------------------

  df_test <- df_plotTest |>
    ungroup() |> 
    select(PERIOD, comparisonPeriod, netWinPerFreeplayNominal) 
  
  df_ttm <- df_plotTest |> 
    filter(comparisonPeriod == 'TTM')
  
  df_priorPeriods <- df_plotTest |> 
    filter(comparisonPeriod != 'TTM')
  
  # Ensure equal sample size across groups
  nrow(df_ttm) == nrow(df_priorPeriods)
  
  
  ### t test dataset  ----------------------------------------------------------
  
  df_testFinal <- data.frame(TTM       = df_ttm$netWinPerFreeplayNominal, 
                             PRIOR_TTM = df_priorPeriods$netWinPerFreeplayNominal
                             )
    
  # Perform the t-test
  autoTTest(df_testFinal$TTM,
            df_testFinal$PRIOR_TTM,
            alpha = 1 - ci
            )
}
  