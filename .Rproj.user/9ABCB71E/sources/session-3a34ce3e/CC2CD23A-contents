# Read Commonly Used Library and Reusable Functions
source('Reused-Code//Read-Data-and-Library.R')
library(ggtext)



# INPUTS =======================================================================

highlightedDate = as.Date('2024-01-31')
bigBusiness = c("WS")
removeBusinesses = c('PV', 'TX', 'WG', 'AW', 'MG') # WIGOS transfered

minDate = as.Date('2020-06-01')
maxDate = as.Date('2024-02-01')

monthSelected = 1

# Vendor Groupings
largerVendors <- c('VGT', 'GCG', 'EVERI')

fiscalYearStartMonth = 10

selectedMetricFY = 'Net Win'



# DATA =========================================================================


## DATABASE CONNECTION =========================================================

# Connect to the database                            # Connection using `dbplyr`:
con <- tbl(database,                                 # The database
           in_schema(schema = 'UTILIZATION',         # The schema
           table  = 'DailyGamingByAssetFullDetail')) # The table

# Vendor table
df_largerVendors <- as.data.frame(largerVendors)
df_largerVendors <- cbind(df_largerVendors, TRUE)
colnames(df_largerVendors) <- c('VENDOR_ID', 'isLargeVendor')

# DATA PULL ===================================================================

result <- con  |>

  # Filter the data to date ranges
  filter(GAMING_DATE >= minDate & GAMING_DATE < maxDate) |>

  # Drop Unneeded columns
  select(-c(MANUFACTURER,
            ASSET_CLASS,
            ZONE_GROUPING,
            ZONE,
            BANK,
            LOCATION,
            CURRENCY_DENOM,
            GAME_DESCRIPTION,
            ASSET_NBR,
            AVERAGE_BET,
            NET_HOLD_PERCENT,
            GROSS_HOLD_PERCENT,
            GROSS_THEO_HOLD_PERCENT
            )) |>

  collect()

# write_rds(result, 'Business-Performance/data.rds')
# result <- read_rds('Business-Performance/data.rds')



## DATA PREP ===================================================================
result_filtered <- result |> 
  
  # remove wigos. Done here since dplyr cannot do IN on sql server 
  filter(!(SOURCE_PROP %in% removeBusinesses)) |> 
  
  # Factor lump the largest businesses
  mutate(isBigBusiness = SOURCE_PROP %in% bigBusiness,
         SOURCE_PROP_GROUP = if_else(isBigBusiness, SOURCE_PROP, "All Other Bally's Properties"),
         SOURCE_PROP_GROUP = if_else(SOURCE_PROP_GROUP == 'WS', 'WinStar', SOURCE_PROP_GROUP),
         
         # Add month end data
         GAMING_MONTH_END = ceiling_date(GAMING_DATE, 'month') - days(1)
  ) |> 
  
  # Flag is the vendor is one of the larger vendors
  left_join(df_largerVendors,
            by = 'VENDOR_ID') |>
  mutate(VENDOR_GROUPING = if_else(is.na(isLargeVendor), 
                                   'Other',        # Group as other if not defined as a larger vendor 
                                   VENDOR_ID)) |> # Use the larget vendor as it's own group
  select(-isLargeVendor) |>   # get rid of since now using vendor grouping col
  rename(FREE_PLAY = FREEPLAY)

    

### Fiscal Year Table ----------------------------------------------------------

fiscalYearMap <- data.frame(GAMING_MONTH_END = unique(result_filtered$GAMING_MONTH_END)) |> 
  
  mutate(FISCAL_YEAR = if_else(month(GAMING_MONTH_END) >= fiscalYearStartMonth & month(GAMING_MONTH_END) <= 12,
                               year(GAMING_MONTH_END) + 1, year(GAMING_MONTH_END)),
         monthName = format(GAMING_MONTH_END, '%b'),
         monthNum  = month(GAMING_MONTH_END),
         monthSortFiscal = monthNum + if_else(monthNum >= fiscalYearStartMonth & monthNum <= 12, -100, 0)
         )
    

     
### Monthly coin in ----------------------------------------------------------

df_monthlyTotals <- result_filtered |> 
  
  group_by(GAMING_MONTH_END,
           SOURCE_PROP_GROUP,
           VENDOR_GROUPING
           ) |> 
    
  # Sum performance metrics to daily
  summarise(
    
    # Raw data
    COIN_IN       = sum(COIN_IN),
    FREE_PLAY      = sum(FREE_PLAY),
    NET_WIN       = sum(NET_WIN),
    HANDLE_PULLS  = sum(HANDLE_PULLS)
  ) |> 
  
  pivot_longer(cols = where(is.numeric),
               names_to = 'metric',
               values_to = 'value'
               ) |> 
  
  # Clean names
  mutate(metric = str_replace_all(metric, '_', ' '),
         metric = str_to_title(metric)
  )
  

### Group data daily (not asset anymore) -------------------------------------

df <- result_filtered |> 
  group_by(GAMING_DATE,
           GAMING_MONTH_END,
           SOURCE_PROP_GROUP,
           VENDOR_GROUPING
           ) |> 
    
  # Sum performance metrics to daily
  summarise(
    
    # Raw data
    COIN_IN       = sum(COIN_IN),
    FREE_PLAY      = sum(FREE_PLAY),
    NET_WIN       = sum(NET_WIN),
    HANDLE_PULLS  = sum(HANDLE_PULLS),
    NUM_EGMS      = n()
  ) |> 
  
  ### Now re-group to get **daily** average -------------------------------------
  group_by(GAMING_MONTH_END,
           SOURCE_PROP_GROUP,
           VENDOR_GROUPING
           ) |> 
    
  # Sum or create performance metrics
  summarise(
    
    # Per day
    COIN_IN_PER_DAY      = mean(COIN_IN,      na.rm = T),
    NET_WIN_PER_DAY      = mean(NET_WIN,      na.rm = T),
    HANDLE_PULLS_PER_DAY = mean(HANDLE_PULLS, na.rm = T),
    FREE_PLAY_PER_DAY     = mean(FREE_PLAY,     na.rm = T),
    EGMS_PER_DAY         = mean(NUM_EGMS,     na.rm = T),

    # Ratios
    AVG_BET         = sum(COIN_IN, na.rm = T) / sum(HANDLE_PULLS, na.rm = T),
    GROSS_HOLD      = (sum(NET_WIN, na.rm = T) + sum(FREE_PLAY, na.rm = T)) / sum(COIN_IN, na.rm = T),
    HOLD_WT_AVG_BET = AVG_BET  * GROSS_HOLD,
  ) |> 
  
  # Make vendor class as a factor
  mutate(VENDOR_GROUPING = as.factor(VENDOR_GROUPING)) |> 
    
  # Put values into single column for dynamic plotting
  pivot_longer(cols = where(is.numeric),
               names_to = 'metric',
               values_to = 'value'
               ) |> 
  
  # Clean names
  mutate(metric = str_replace_all(metric, '_', ' '))


## Index of vendor growth ------------------------------------------------------




### Index function ------------------------------------------------------------

indexGrowth <- function(df, groupingCols, dateCol,
                        delim = '--'
                        ) {

  df_wide <- df |> 
    
    # pivot wide
    pivot_wider(names_from = groupingCols,
                values_from = where(is.numeric),
                names_sep = delim
    )
    
  # Get only the numeric data for ease of applying calcs to all cols
  df_numeric <- select(df_wide |> ungroup(), where(is.numeric))
  
  
  # Step 1: Calculate percent change for all columns
  df_numeric <- df_numeric |>
    mutate(across(everything(), ~(. / lag(.) - 1)))
  
  
  # Step 2: Set the first row to 1 for all columns
  df_numeric[1, ] <- 1
  
  # Step 3: Calculate the cumulative sum for each row
  df_numeric <- df_numeric |>
    mutate(across(everything(), cumsum))
  
  # Step 4: Multiply all values by 100
  df_numeric <- df_numeric * 100
  
  
  df_numeric[[dateCol]] = df_wide[[dateCol]]
  
  df_index <- df_numeric |> 
    
    # pivot wide
    pivot_longer(cols = where(is.numeric),
                 names_to = 'metric',
                 values_to = 'value'
    ) |> 
    
    separate(col = metric,
             into = groupingCols,
             sep = delim)
  
  return(df_index)
}




# PLOTS ========================================================================


## PLOT 1 - JAN METRICS --------------------------------------------------------

legendTitle = 'Vendor Group'

# # Filter to select month
df_plot <- df |> 
  filter(month(GAMING_MONTH_END) == monthSelected)
  
df_plot <- indexGrowth(df_plot, 
                       groupingCols = c('SOURCE_PROP_GROUP', 'VENDOR_GROUPING', 'metric'),
                       dateCol = 'GAMING_MONTH_END'
                       )

plot_performance <-  df_plot |> 
  
  
  # Map variables to plot
  ggplot(aes(x = GAMING_MONTH_END, 
             y = value,
             color = VENDOR_GROUPING,
             fill  = VENDOR_GROUPING
             )) +
  
  geom_hline(yintercept = 100, color = scale_cmac("gray", 'gray5'),
             linewidth = 0.75) + 
  
  # Add lines
  geom_line() +
  geom_point(size = 1.5, 
             pch = 21, # Type of point that allows us to have both color (border) and fill.
             color = "white", 
             stroke = 0.75 # The width of the border, i.e. stroke.
             ) +
  
  
  # Labels
  labs(title    = 'Vendor Gaming Performance Metrics Growth Index\n',
       subtitle = paste('Only showing data occuring in',
                        paste(unique(month(df_plot$GAMING_MONTH_END, label = TRUE, abbr = FALSE)), collapse = ', '), 
                        '| Index = 100 at', format(min(df_plot$GAMING_MONTH_END), '%B %Y'),
                        '\n'),
       x        = '\nGaming Month-End Date',
       y        = '',
       color    = legendTitle,
       fill     = legendTitle,
       caption  = "\nSource: Bally's Corporation."
       ) +
  
  # Facetting
  facet_grid(cols = vars(reorder(str_wrap(SOURCE_PROP_GROUP, 10), desc(value))),
             rows = vars(reorder(str_wrap(metric, 8), desc(value), fun = last)),
             scales = 'free_y',
             switch = "y"
             ) +
  
  # Axis formats
  scale_y_continuous(labels = comma) +
  scale_x_date(breaks = c(min(df_plot$GAMING_MONTH_END), max(df_plot$GAMING_MONTH_END)),
               date_labels = "'%y") +
  
  # Theme
  scale_color_cmac() +
  scale_fill_cmac(overrideWithAccent = TRUE) +
  theme_cmac(borderMode = 'facet',
             inTimesNewRoman = T) +
  
  # Additional theme
  theme(legend.position = 'top',
        legend.title = element_text(color = scale_cmac('text')),
        strip.placement = "outside", # Ensures labels are outside the plot area
        strip.text.y = element_text(size = 9, hjust = 1, vjust = 1),
        strip.text.x = element_text(vjust = 1),
        axis.text.x = element_text(hjust = 1),
        panel.spacing.y = unit(1.5, "lines")
        )

plot_performance # display

exportToPNG(cowplot::plot_grid(last_plot()), 
            outputFileName  = 'Business-Performance/Visualizations/Vendor-Performance',      
            outHeight       =  1050, 
            outWidth        =  650, 
            outResolution   =  90,     
            SCALED_BY       =  12 
)



## PLOT 2 - GAME SHARE ---------------------------------------------------------

colGray = scale_cmac('gray', 'gray6')

# Filter to only EGM share
df_plot_gameShare <- df |> 
  filter(str_detect(str_to_lower(metric), 'egm'))

# gray lines behind without distinction
df_plot_gameShare_gray <- df_plot_gameShare |> 
  rename(VENDOR_GROUPING_SECRET = VENDOR_GROUPING)

# Identify the last points for each VENDOR_GROUPING
last_points <- df_plot_gameShare |>
  group_by(SOURCE_PROP_GROUP, VENDOR_GROUPING) |>
  slice(which.max(GAMING_MONTH_END)) |>
  ungroup()

# Identify the last points for each VENDOR_GROUPING
last_points_gray <- df_plot_gameShare_gray |>
  group_by(SOURCE_PROP_GROUP, VENDOR_GROUPING_SECRET) |>
  slice(which.max(GAMING_MONTH_END)) |>
  ungroup()

plot_gameShare <- df_plot_gameShare |> 
  
  # Map variables to plot
  ggplot(aes(x = GAMING_MONTH_END,
             y = value
             )) +
  
  # **Gray** lines
  geom_line(data = df_plot_gameShare_gray,  
            aes(group = VENDOR_GROUPING_SECRET), 
            color = colGray,
            linewidth = 0.5
            ) +

  # Vendor **Labels gray**
  geom_text(data = last_points_gray, 
            aes(label = VENDOR_GROUPING_SECRET), 
            color = colGray,
            hjust = 1.1, vjust = 1.4,
            size = 3,
            family = 'Times'
            ) +
  
  # **Colored** lines
  geom_line(aes(color = VENDOR_GROUPING),
            linewidth = 1
            ) +
  
  # Vendor **Labels colored**
  geom_text(data = last_points, 
            aes(label = VENDOR_GROUPING, color = VENDOR_GROUPING), 
            hjust = 1.1, vjust = 1.5,
            fontface = 'bold',
            size = 3.75,
            family = 'Times'
            ) +
  

  # Labels
  labs(title    = 'Vendor Share of Floor\n',
       subtitle = paste('Monthly data from', 
                        format(min(df_plot_gameShare$GAMING_MONTH_END), '%B %Y'), 'to', 
                        format(max(df_plot_gameShare$GAMING_MONTH_END), '%B %Y'), '\n'
                        ),
       x        = '\nGaming Month-End Date',
       y        = '',
       caption  = "\nSource: Bally's Corporation."
       # color    = legendTitle,
       # fill     = legendTitle
       ) +
  
  # Facetting
  facet_grid(cols = vars(reorder(str_wrap(SOURCE_PROP_GROUP, 15), value)),
             rows = vars(reorder(str_wrap(VENDOR_GROUPING, 8), value)),
             scales = 'free_y',
             switch = "y"
             ) +
  
  # Axis formats
  scale_y_continuous(labels = comma) +
  
  # Theme
  scale_color_cmac() +
  scale_fill_cmac(overrideWithAccent = TRUE) +
  theme_cmac(borderMode = 'facet',
             inTimesNewRoman = T) +
  
  # Additional theme
  theme(legend.position = 'none',
        # legend.title = element_text(color = scale_cmac('text')),
        strip.placement = "outside", # Ensures labels are outside the plot area
        strip.text.y = element_text(size = 12, hjust = 1, vjust = 1),
        strip.text.x = element_text(vjust = 1),
        axis.text.x = element_text(hjust = 1),
        panel.spacing.y = unit(1.5, "lines"),
        panel.grid.major.y = element_line(color = 'gray96',
                                          size = 0.5)
        )

plot_gameShare # display


exportToPNG(cowplot::plot_grid(last_plot()), 
            outputFileName =  'Business-Performance/Visualizations/Vendor-Game-Share',
            outHeight      =  1000,
            outWidth       =  800,
            outResolution  =  100,
            SCALED_BY      =  12
)





## PLOT 3 - MONTHLY TOTALS -----------------------------------------------------

millionsOfDollars <- function(x) dollar(x / 1e6, prefix = "$", suffix = " M")


plot_totals <- function(df, filename, sortFun = desc,
                        isIndex = F, labelsFor = c('EVERI'),
                        labelFun = millionsOfDollars
                        ) {
  
  df_labels <- df |>  filter(VENDOR_GROUPING %in% labelsFor)
  
  scaleValue = 1000000
  if (!(max(df_labels$value) > scaleValue)) {
    scaleValue = 1
  }
    
  df_labels$value = round(df_labels$value / scaleValue, 0)
  
  plot_monthlyTotals <-  df |> 
    
    # Map variables to plot
    ggplot(aes(x = GAMING_MONTH_END, 
               y = value,
               color = VENDOR_GROUPING,
               fill  = VENDOR_GROUPING
    )) +
    
    geom_hline(yintercept = 100, color = scale_cmac("gray", 'gray5'),
               linewidth = 0.75) + 
    
    # Add lines
    geom_line() +
    geom_point(size = 0.75, 
               pch = 21, # Type of point that allows us to have both color (border) and fill.
               color = "white", 
               stroke = 0.4 # The width of the border, i.e. stroke.
    ) +
    
    # geom_text(data = df_labels,
    #           aes(label = value, y = value * scaleValue),
    #           hjust = 0, vjust = 2,
    #           size = 3.5,
    #           family = 'Times'
    #               ) + 
    # 
    
    # Labels
    labs(title    = paste('Vendor Gaming Performance Metrics', ifelse(isIndex, 'Growth Index', ''), '\n'),
         subtitle = paste('Index = 100 at', format(min(df_plot$GAMING_MONTH_END), '%B %Y'), '\n'),
         x        = '\nGaming Month-End Date',
         y        = '',
         color    = legendTitle,
         fill     = legendTitle,
         caption  = "\nSource: Bally's Corporation."
    ) +
    
    # Facetting
    facet_grid(cols = vars(reorder(str_wrap(SOURCE_PROP_GROUP, 10), value |> sortFun())),
               rows = vars(reorder(str_wrap(metric, 15), desc(value), fun = last)),
               scales = 'free_y',
               switch = "y"
    ) +
    
    # Axis formats
    scale_y_continuous(labels = labelFun) +
    scale_x_date(breaks = c(min(df_plot$GAMING_MONTH_END), max(df_plot$GAMING_MONTH_END)),
                 date_labels = "'%y") +
    
    # Theme
    scale_color_cmac() +
    scale_fill_cmac(overrideWithAccent = TRUE) +
    theme_cmac(borderMode = 'facet',
               inTimesNewRoman = T) +
    
    # Additional theme
    theme(legend.position = 'top',
          legend.title = element_text(color = scale_cmac('text')),
          strip.placement = "outside", # Ensures labels are outside the plot area
          strip.text.y = element_text(size = 12, hjust = 1, vjust = 1),
          strip.text.x = element_text(vjust = 1),
          axis.text.x = element_text(hjust = 1),
          panel.spacing.y = unit(1.5, "lines")
    ) +
    
    expand_limits(x = max(df$GAMING_MONTH_END) + 60)  # Adjust the number of days added according to your date range and requirements
    
  
  plot_monthlyTotals # display
  
  
  exportToPNG(cowplot::plot_grid(last_plot()), 
              outputFileName =  filename,
              outHeight      =  1000,
              outWidth       =  850,
              outResolution  =  100,
              SCALED_BY      =  12
  )
  return(last_plot())
}


# plot_totals(df_monthlyTotals |> filter(month(GAMING_MONTH_END) == monthSelected), 
#             'Business-Performance/Visualizations/Vendor-Monthly-Totals')
# 

df_index_monthlyTotals <- indexGrowth(df_monthlyTotals,# |> filter(month(GAMING_MONTH_END) == monthSelected), 
                                     groupingCols = c('SOURCE_PROP_GROUP', 'VENDOR_GROUPING', 'metric'),
                                     dateCol = 'GAMING_MONTH_END'
)

noFunction <- function(x) {return(x)}

plot_totals(df_index_monthlyTotals, 'Business-Performance/Visualizations/Vendor-Monthly-Totals-Index-Full', 
            isIndex = TRUE,
            labelFun = comma,
            sortFun = noFunction)


## PLOT 4: Fiscal Year Net Win --------------------------------------------------

colBlue = scale_cmac('blue', 'blue2')

df_fiscalYearTotals <- df_monthlyTotals |> 
  
  filter(metric == selectedMetricFY) |> 
  
  left_join(fiscalYearMap, by = 'GAMING_MONTH_END') |> 
  
  mutate(FISCAL_YEAR = as.factor(FISCAL_YEAR))


plot_fiscalYears <-  df_fiscalYearTotals |> 
  
  # Map variables to plot
  ggplot(aes(x = reorder(monthName, monthSortFiscal), 
             y = value,
             group = FISCAL_YEAR
  )) +
  
  # Add lines
  geom_line(data = df_fiscalYearTotals |> filter(FISCAL_YEAR != year(max(df_monthlyTotals$GAMING_MONTH_END))),
            aes(color = FISCAL_YEAR),
            linetype = 'solid',
            linewidth = 0.65,
            alpha = 0.5
            ) +

  # Points
  geom_point(data = df_fiscalYearTotals |> filter(FISCAL_YEAR != year(max(df_monthlyTotals$GAMING_MONTH_END))),
             aes(color = FISCAL_YEAR),
             size = 0.8, 
             alpha = 0.3
  ) +
  
  
  # Add lines -- this fiscal
  geom_line(data = df_fiscalYearTotals |> filter(FISCAL_YEAR == year(max(df_monthlyTotals$GAMING_MONTH_END))),
            linetype = 'solid',
            linewidth = 1.05,
            color = colBlue
            ) +

  # Points -- this fiscal year
  geom_point(data = df_fiscalYearTotals |> filter(FISCAL_YEAR == year(max(df_monthlyTotals$GAMING_MONTH_END))),
             size = 2.5, 
             pch = 21, # Type of point that allows us to have both color (border) and fill.
             color = "white", 
             stroke = 1.25, # The width of the border, i.e. stroke.
             fill = colBlue
  ) +
  
  # Labels
  labs(title    = paste(selectedMetricFY, 'Decreases Across all Vendors in January 2024\n'),
       subtitle = "<b><span style = 'color: #1F4E79'>Current</span></b> vs. Prior Fiscal Years</br>",
       x        = '\nGaming Month',
       y        = 'Gaming Vendor\n',
       color    = 'Fiscal Year',
       fill     = 'Fiscal Year',
       caption  = "\nSource: Bally's Corporation."
  ) +
  
  # Facetting
  facet_grid(cols = vars(reorder(str_wrap(SOURCE_PROP_GROUP, 10), value |> desc())),
             rows = vars(reorder(str_wrap(VENDOR_GROUPING, 8), desc(value), fun = last)),
             scales = 'free_y',
             switch = "y"
  ) +
  
  # Axis formats
  scale_y_continuous(labels = millionsOfDollars) +
  
  # Theme
  scale_color_cmac() +
  scale_fill_cmac(overrideWithAccent = TRUE) +
  theme_cmac(borderMode = 'facet',
             inTimesNewRoman = T) +
  
  # Additional theme
  theme(plot.subtitle = element_markdown(),
        legend.position = 'top',
        legend.title = element_text(color = scale_cmac('text')),
        strip.placement = "outside", # Ensures labels are outside the plot area
        strip.text.y = element_text(size = 12, hjust = 1, vjust = 1),
        strip.text.x = element_text(vjust = 1),
        axis.text.x = element_text(angle = 45),
        panel.spacing.y = unit(1.5, "lines")
  )
  


plot_fiscalYears # display

exportToPNG(cowplot::plot_grid(last_plot()), 
            outputFileName =  paste0('Business-Performance/Visualizations/Vendor-', selectedMetricFY, '-Fiscal-Year'),
            outHeight      =  1000,
            outWidth       =  1000,
            outResolution  =  100,
            SCALED_BY      =  12
)
